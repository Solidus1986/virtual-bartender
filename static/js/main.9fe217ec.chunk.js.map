{"version":3,"sources":["assets/img/iphone-x.png","actions/types.js","reducers/kwalys.js","reducers/index.js","store.js","components/chat/Messages.js","assets/img/short.svg","assets/img/long.svg","assets/img/acide.jpg","assets/img/smocky.jpg","assets/img/fruity.jpg","components/chat/Responses.js","components/chat/Chat.js","actions/kwalys.js","App.js","index.js"],"names":["RESPONSE_USER_SUCCESS","RESPONSE_USER_FAIL","SESSION_SUCCESS","SESSION_FAIL","RESPONSE_BOT_SUCCESS","RESPONSE_BOT_FAIL","MESSAGE_SUCCESS","MESSAGE_FAIL","initialState","messagesChat","messages","combineReducers","kwalys","state","action","type","payload","localStorage","setItem","message","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Messages","dataMessages","className","map","bot","src","content","replace","Responses","dataResponses","dataHandleSubmit","user","height","short","alt","onClick","value","name","tracking","id","long","acid","smocky","fruity","Response","connect","chat","botMessages","token","session","userMessage","dispatch","a","err","botMessage","axios","post","res","data","sendMessage","resData","useState","endOfMessages","useRef","toggle","setToggle","chatBot","setChatbot","bartender","setBartender","handleSubmit","e","preventDefault","target","console","log","useEffect","current","scrollIntoView","behavior","splice","length","clear","mess","responses","ref","defaults","headers","common","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fe217ec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iphone-x.9ab38d39.png\";","export const RESPONSE_USER_SUCCESS = \"RESPONSE_USER_SUCCESS\";\r\nexport const RESPONSE_USER_FAIL = \"RESPONSE_USER_FAIL\";\r\nexport const SESSION_SUCCESS = \"SESSION_SUCCESS\";\r\nexport const SESSION_FAIL = \"SESSION_FAIL\";\r\nexport const RESPONSE_BOT_SUCCESS = \"RESPONSE_BOT_SUCCESS\";\r\nexport const RESPONSE_BOT_FAIL = \"RESPONSE_BOT_FAIL\";\r\nexport const MESSAGE_SUCCESS = \"MESSAGE_SUCCESS\";\r\nexport const MESSAGE_FAIL = \"MESSAGE_FAIL\";","// Import types\r\nimport {\r\n    RESPONSE_USER_SUCCESS,\r\n    RESPONSE_USER_FAIL,\r\n    SESSION_SUCCESS,\r\n    SESSION_FAIL,\r\n    RESPONSE_BOT_SUCCESS,\r\n    RESPONSE_BOT_FAIL,\r\n    MESSAGE_SUCCESS,\r\n    MESSAGE_FAIL\r\n  } from \"../actions/types\";\r\n  \r\n  // Initial state\r\n  const initialState = {\r\n    messagesChat: [],\r\n    messages: [],\r\n  };\r\n  \r\n  // Switch statement - update state\r\n  export default (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    let { messagesChat, messages } = state;\r\n\r\n    switch (type) {\r\n      case RESPONSE_USER_SUCCESS:\r\n        // messagesChat = [...messagesChat, messages];\r\n        return {\r\n          ...state,\r\n          messagesChat,\r\n        };\r\n      case RESPONSE_USER_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      case SESSION_SUCCESS:\r\n        localStorage.setItem(\"session\", payload); \r\n        return {\r\n          ...state,\r\n        };\r\n      case SESSION_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      case RESPONSE_BOT_SUCCESS:\r\n        messages = [...messages,{ message: payload, type:\"bot\"}];\r\n       \r\n        return {\r\n          ...state,\r\n          messages\r\n        };\r\n      case RESPONSE_BOT_FAIL:\r\n        return {\r\n          ...state,\r\n        };      \r\n      case MESSAGE_SUCCESS:\r\n        messages = [...messages, { message: payload, type:\"user\"}];\r\n        \r\n        return {\r\n          ...state,\r\n          messages\r\n        };\r\n      case MESSAGE_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      default:\r\n        return {\r\n          ...state,\r\n        };\r\n    }\r\n  };\r\n  ","// import dependencies\r\nimport { combineReducers } from \"redux\";\r\n\r\n// import reducers\r\nimport kwalys from './kwalys'\r\n// export combined reducers\r\nexport default combineReducers({ kwalys });\r\n","// Import dependencies\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./reducers\";\r\n\r\n// Connect the application to Redux Devtools\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// Setup initial state\r\nconst initialState = {};\r\n\r\n// Import middleware\r\nconst middleware = [thunk];\r\n\r\n// Setup store\r\nconst store = createStore(\r\n  combineReducers,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n// Export store\r\nexport default store;\r\n","import React from 'react'\r\n\r\nexport default function Messages({dataMessages}) {\r\n    return (\r\n        <div className=\"chat-messages\">       \r\n                        {dataMessages.map((bot)=> (\r\n                            <div className=\"mess\" type={bot.type}>\r\n                                {bot.type ===\"media\" ? \r\n                                    <img className=\"media\" src={bot.content}/>\r\n                                    : <div>{bot.content.replace(/<(?:.|\\n)*?>/gm, ' ')}</div>\r\n                                }\r\n                            </div>\r\n                            \r\n                        ))}\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/short.9bdb22ec.svg\";","export default __webpack_public_path__ + \"static/media/long.473a2d63.svg\";","export default __webpack_public_path__ + \"static/media/acide.7f718d8c.jpg\";","export default __webpack_public_path__ + \"static/media/smocky.1ac48840.jpg\";","export default __webpack_public_path__ + \"static/media/fruity.e5f99a7d.jpg\";","import React from 'react'\r\n\r\n// import assets\r\nimport short from \"./../../assets/img/short.svg\";\r\nimport long from \"./../../assets/img/long.svg\";\r\nimport acid from \"./../../assets/img/acide.jpg\";\r\nimport smocky from \"./../../assets/img/smocky.jpg\";\r\nimport fruity from \"./../../assets/img/fruity.jpg\";\r\n\r\nexport default function Responses({dataResponses, dataHandleSubmit}) {\r\n    return (\r\n        <div className=\"chat-responses\">\r\n                        {dataResponses.map((user)=>(\r\n                            <>\r\n                            {(() => {\r\n                            switch(user.content) {\r\n                                case 'Short':\r\n                                    return <img className=\"imgResponse\" height={80} src={short} alt={user.content} key={user.id} onClick={dataHandleSubmit} value={user.content} name={user.tracking}/>;\r\n                                case 'Long':\r\n                                    return <img className=\"imgResponse\" height={80} src={long} alt={user.content} key={user.id} onClick={dataHandleSubmit} value={user.content} name={user.tracking}/>;\r\n                                case 'Acid':\r\n                                    return <div className=\"taste\" onClick={dataHandleSubmit}><img className=\"imgResponse\" height={80} src={acid} alt={user.content} key={user.id}  value={user.content} name={user.tracking}/><p>{user.content}</p></div>;\r\n                                case 'Smocky':\r\n                                    return <div className=\"taste\" onClick={dataHandleSubmit}><img className=\"imgResponse\" height={80} src={smocky} alt={user.content} key={user.id} value={user.content} name={user.tracking}/><p>{user.content}</p></div>;\r\n                                case 'Fruity':\r\n                                    return <div className=\"taste\" onClick={dataHandleSubmit}><img className=\"imgResponse\" height={80} src={fruity} alt={user.content} key={user.id} value={user.content} name={user.tracking}/><p>{user.content}</p></div>;\r\n                               default:\r\n                               return <Response user={user}  dataHandleSubmit={dataHandleSubmit} />;\r\n                            }\r\n                             })()}\r\n                            </>\r\n                        ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction Response({user, dataHandleSubmit}) {\r\n    return (\r\n        <input \r\n                                className=\"bot-responses\" \r\n                                type=\"submit\" \r\n                                key={user.id} \r\n                                onClick={dataHandleSubmit} \r\n                                value={user.content} \r\n                                name={user.tracking} />\r\n                           \r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//  Import action\r\nimport { userMessage, botMessage, sendMessage, cre} from '../../actions/kwalys';\r\nimport Messages from \"./Messages\";\r\nimport Responses from \"./Responses\";\r\n\r\nconst Chat = ({ chat, botMessages, token, userMessage, botMessage, sendMessage}) => {  \r\n\r\n    // Handle Users message\r\n    const [message, setMessage] = useState(\"\");\r\n    const endOfMessages = useRef(null);\r\n    // Toggle chatbot\r\n    const [toggle, setToggle] = useState(false);\r\n    const [chatBot, setChatbot] = useState(false);\r\n    const [bartender, setBartender] = useState(true);\r\n\r\n    // Function handles user submission\r\n    const handleClick = async (e) => {\r\n        userMessage(message)\r\n        botMessage(message)\r\n        setMessage(\"\")\r\n    } \r\n    \r\n    // Function handles response\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const resData = {\r\n            \"session\": token,\r\n            \"tracking\": e.target.name,\r\n            \"text\": e.target.value \r\n        }\r\n        sendMessage(resData)\r\n    }\r\n\r\n    const clearSession = () => {\r\n        localStorage.clear(token)\r\n    }\r\n    // Function toggle chat\r\n    const toggleBartender = () => {\r\n        setToggle(!toggle)\r\n\r\n    }\r\n    const closeChatbot = () => {\r\n        setBartender(!bartender);\r\n        setChatbot(!chatBot);\r\n        botMessages.splice(0, botMessages.length);\r\n        clearSession()\r\n    }\r\n    const openChatBot = () => {\r\n        botMessage();\r\n        setBartender(!bartender);\r\n        setChatbot(!chatBot);\r\n    }\r\n    console.log(botMessages, \"le chat\")\r\n\r\n\r\n    \r\n      useEffect(() => {\r\n    if (botMessages && endOfMessages.current) {\r\n      endOfMessages.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [botMessages]);\r\n    return (\r\n        <div className=\"chatbot\">\r\n            {/* Handle Messages */}\r\n            {chatBot ?  \r\n                <div className=\"chat\"> \r\n                    <div className=\"chat-header\">\r\n                        <div className=\"close\" onClick={closeChatbot}>X</div>\r\n                    </div>       \r\n                    <div className=\"historyContainer\" >\r\n                        <div className=\"chatBotUser\" >     \r\n                            {botMessages.map((mess) => ( \r\n                            <>\r\n                                <Messages dataMessages={mess.message.messages}/>\r\n                                <Responses dataResponses={mess.message.responses} dataHandleSubmit={handleSubmit}/>\r\n                            </> \r\n                            ))}\r\n                            <div className=\"scrollbar\" ref={endOfMessages} ></div>\r\n                        </div>\r\n                    </div>\r\n                </div> \r\n            : \"\"}\r\n            {bartender ?\r\n            <div onClick={toggleBartender}>\r\n                <div className=\"bartender\" >\r\n                    <div className=\"logo-left\"></div>\r\n                    <button className=\"logo\"  onClick={openChatBot} />\r\n                    <div className=\"logo-left\"></div>\r\n                    <div>\r\n                    <p className=\"bartender-title\">VIRTUAL BARTENDER</p>\r\n                    {/* {!toggle ? <p className=\"bartender-title\">VIRTUAL BARTENDER</p> \r\n                        :\r\n                        <div className=\"go\" >^</div>\r\n                    } */}\r\n                    </div>\r\n                </div>\r\n                {/* <div> \r\n                    {toggle ? \r\n                        <p className=\"bartender-message\">\r\n                        Hi!\r\n                        <br />\r\n                        I am Hennessy virtual bartender.\r\n                        <br />\r\n                        Let me guide you to find your perfect cocktail match!\r\n                    </p> : \"\"\r\n                    }   \r\n                    \r\n                </div> */}\r\n            </div> : \"\"}\r\n      \r\n        </div>\r\n          \r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    chat: state.kwalys.messagesChat,\r\n    botMessages: state.kwalys.messages,\r\n    token: localStorage.session\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { userMessage, botMessage, sendMessage })(Chat);\r\n  \r\n\r\n\r\n  /**\r\n   * <div className=\"chat-messages\">\r\n                {botMessages.length === 0\r\n                    ? \"\"\r\n                    : botMessages.message.messages.map((botMessage) => (\r\n                    <div key={botMessage.type}>\r\n                            {botMessage.content}\r\n                            {console.log(botMessage.content)}\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <div className=\"chat-responses\">\r\n                {botMessages.length === 0\r\n                    ? \"\"\r\n                    :botMessages.message.responses.map((botResponse) => (\r\n                    <> \r\n                    {botResponse.content === \"Sucré\" ? <p>fruit</p> : \"\"}\r\n                    <input className=\"bot-responses\" type=\"submit\" key={botResponse.id} onClick={handleSubmit} value={botResponse.content} name={botResponse.tracking} />   \r\n                    </>    \r\n                ))}\r\n                </div>\r\n            </div>\r\n            : \"\"\r\n   */","// Import types\r\nimport {\r\n    RESPONSE_USER_SUCCESS,\r\n    RESPONSE_USER_FAIL,\r\n    SESSION_SUCCESS,\r\n    SESSION_FAIL,\r\n    RESPONSE_BOT_SUCCESS,\r\n    RESPONSE_BOT_FAIL,\r\n    MESSAGE_SUCCESS,\r\n    MESSAGE_FAIL\r\n  } from \"./types\";\r\n  \r\n  //  Import axios\r\n  import axios from \"axios\";\r\n  \r\n  //  Function that handles  users response\r\n  export const userMessage = (messages) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: RESPONSE_USER_SUCCESS, payload: messages });\r\n    } catch (err) {\r\n      dispatch({ type: RESPONSE_USER_FAIL });\r\n    }\r\n  };\r\n\r\n\r\n  //  Creates a session - API CALL\r\n\r\n  export const createSession = () => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/Demo_hennessy/api/web\");\r\n      dispatch({ type: SESSION_SUCCESS, payload: res.data.session }, console.log(res.data.session, \"num de session\") );\r\n    } catch (err) {\r\n      dispatch({ type: SESSION_FAIL });\r\n    }\r\n  };\r\n\r\n  // First bot message - API CALL\r\n\r\n  export const botMessage = () => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/Demo_hennessy/api/web\");\r\n      dispatch({ type: RESPONSE_BOT_SUCCESS, payload: res.data.data});\r\n    } catch (err) {\r\n      dispatch({ type:  RESPONSE_BOT_FAIL});\r\n    }\r\n  };\r\n  \r\n  //  Sends the message to the bot - API CALL\r\n  export const sendMessage = (resData) => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/Demo_hennessy/api/web\", resData);\r\n      dispatch({\r\n        type: MESSAGE_SUCCESS,\r\n        payload: res.data.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({ type: MESSAGE_FAIL });\r\n    }\r\n  };\r\n  ","// Import dependencies\nimport {useEffect} from 'react'\nimport './App.css';\nimport axios from 'axios';\nimport iphone from \"./assets/img/iphone-x.png\"\n\n// Import redux component\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// Import chat component\nimport Chat from './components/chat/Chat';\n\n// Import action\nimport { createSession } from './actions/kwalys'\n\n\nif (localStorage.session) {\n  delete axios.defaults.headers.common.session;\n  axios.defaults.headers.common.session = localStorage.session;\n} else {\n  delete axios.defaults.headers.common.session;\n}\n\n\n// Connect application to redux\nconst App = () => {\n  useEffect(() => {\n    // Check if there session\n    if(!localStorage.session) {\n      //Create\n      store.dispatch(createSession())\n      \n    }\n  })\n\n\n\n  return (\n    <Provider store={store} >\n \n      <div className=\"App\">\n        <Chat />\n      </div>\n      \n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}