{"version":3,"sources":["actions/types.js","reducers/kwalys.js","reducers/index.js","store.js","components/chat/Chat.js","actions/kwalys.js","App.js","index.js"],"names":["RESPONSE_USER_SUCCESS","RESPONSE_USER_FAIL","SESSION_SUCCESS","SESSION_FAIL","RESPONSE_BOT_SUCCESS","RESPONSE_BOT_FAIL","MESSAGE_SUCCESS","MESSAGE_FAIL","initialState","messagesChat","messages","combineReducers","kwalys","state","action","type","payload","session","localStorage","setItem","message","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","connect","chat","botMessages","token","userMessage","dispatch","a","err","botMessage","axios","post","res","data","sendMessage","resData","useState","endOfMessages","useRef","toggle","setToggle","chatBot","setChatbot","bartender","setBartender","handleSubmit","e","preventDefault","target","name","value","console","log","useEffect","current","scrollIntoView","behavior","className","onClick","splice","length","clear","map","mess","bot","src","content","responses","user","tracking","id","ref","defaults","headers","common","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21abab0b.chunk.js","sourcesContent":["export const RESPONSE_USER_SUCCESS = \"RESPONSE_USER_SUCCESS\";\r\nexport const RESPONSE_USER_FAIL = \"RESPONSE_USER_FAIL\";\r\nexport const SESSION_SUCCESS = \"SESSION_SUCCESS\";\r\nexport const SESSION_FAIL = \"SESSION_FAIL\";\r\nexport const RESPONSE_BOT_SUCCESS = \"RESPONSE_BOT_SUCCESS\";\r\nexport const RESPONSE_BOT_FAIL = \"RESPONSE_BOT_FAIL\";\r\nexport const MESSAGE_SUCCESS = \"MESSAGE_SUCCESS\";\r\nexport const MESSAGE_FAIL = \"MESSAGE_FAIL\";","// Import types\r\nimport {\r\n    RESPONSE_USER_SUCCESS,\r\n    RESPONSE_USER_FAIL,\r\n    SESSION_SUCCESS,\r\n    SESSION_FAIL,\r\n    RESPONSE_BOT_SUCCESS,\r\n    RESPONSE_BOT_FAIL,\r\n    MESSAGE_SUCCESS,\r\n    MESSAGE_FAIL\r\n  } from \"../actions/types\";\r\n  \r\n  // Initial state\r\n  const initialState = {\r\n    messagesChat: [],\r\n    messages: [],\r\n    \r\n  };\r\n  \r\n  // Switch statement - update state\r\n  export default (state = initialState, action) => {\r\n    const { type, payload } = action;\r\n    let { messagesChat, messages, session } = state;\r\n\r\n    switch (type) {\r\n      case RESPONSE_USER_SUCCESS:\r\n        // messagesChat = [...messagesChat, messages];\r\n        return {\r\n          ...state,\r\n          messagesChat,\r\n        };\r\n      case RESPONSE_USER_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      case SESSION_SUCCESS:\r\n        localStorage.setItem(\"session\", payload); \r\n        return {\r\n          ...state,\r\n        };\r\n      case SESSION_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      case RESPONSE_BOT_SUCCESS:\r\n        messages = [...messages,{ message: payload, type:\"bot\"}];\r\n       \r\n        return {\r\n          ...state,\r\n          messages\r\n        };\r\n      case RESPONSE_BOT_FAIL:\r\n        return {\r\n          ...state,\r\n        };      \r\n      case MESSAGE_SUCCESS:\r\n        messages = [...messages, { message: payload, type:\"user\"}];\r\n        \r\n        return {\r\n          ...state,\r\n          messages\r\n        };\r\n      case MESSAGE_FAIL:\r\n        return {\r\n          ...state,\r\n        };\r\n      default:\r\n        return {\r\n          ...state,\r\n        };\r\n    }\r\n  };\r\n  ","// import dependencies\r\nimport { combineReducers } from \"redux\";\r\n\r\n// import reducers\r\nimport kwalys from './kwalys'\r\n// export combined reducers\r\nexport default combineReducers({ kwalys });\r\n","// Import dependencies\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport combineReducers from \"./reducers\";\r\n\r\n// Connect the application to Redux Devtools\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n// Setup initial state\r\nconst initialState = {};\r\n\r\n// Import middleware\r\nconst middleware = [thunk];\r\n\r\n// Setup store\r\nconst store = createStore(\r\n  combineReducers,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n// Export store\r\nexport default store;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//  Import action\r\nimport { userMessage, botMessage, sendMessage} from '../../actions/kwalys';\r\n\r\nconst Chat = ({ chat, botMessages, token, userMessage, botMessage, sendMessage}) => {  \r\n\r\n    // Handle Users message\r\n    const [message, setMessage] = useState(\"\");\r\n    const endOfMessages = useRef(null);\r\n    // Toggle chatbot\r\n    const [toggle, setToggle] = useState(false);\r\n    const [chatBot, setChatbot] = useState(false);\r\n    const [bartender, setBartender] = useState(true);\r\n\r\n    // Function handles user submission\r\n    const handleClick = async (e) => {\r\n        userMessage(message)\r\n        botMessage(message)\r\n        setMessage(\"\")\r\n    } \r\n    \r\n    // Function handles response\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const resData = {\r\n            \"session\": token,\r\n            \"tracking\": e.target.name,\r\n            \"text\": e.target.value \r\n        }\r\n        sendMessage(resData)\r\n    }\r\n\r\n    const clearSession = () => {\r\n        localStorage.clear()\r\n    }\r\n    // Function toggle chat\r\n    const toggleBartender = () => {\r\n        setToggle(!toggle)\r\n    }\r\n    const closeChatbot = () => {\r\n        setBartender(!bartender);\r\n        setChatbot(!chatBot);\r\n        botMessages.splice(0, botMessages.length);\r\n        clearSession()\r\n    }\r\n    const openChatBot = () => {\r\n        botMessage();\r\n        setBartender(!bartender);\r\n        setChatbot(!chatBot);\r\n    }\r\n    console.log(chat)\r\n    console.log(botMessages)\r\n\r\n\r\n    \r\n      useEffect(() => {\r\n    if (botMessages && endOfMessages.current) {\r\n      endOfMessages.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [botMessages]);\r\n   \r\n    return (\r\n        <div className=\"chat\">\r\n            \r\n            {/* Handle Messages */}\r\n            {chatBot ?  \r\n                <> \r\n                <div className=\"chat-header\">\r\n                    <div className=\"close\" onClick={closeChatbot}>X</div>\r\n                </div>       \r\n                <div className=\"historyContainer\" >\r\n                    <div className=\"chatBotUser\" >     \r\n                    {botMessages.map((mess) => ( \r\n                        <>\r\n                        <div className=\"chat-messages\">       \r\n                        {mess.message.messages.map((bot)=> (\r\n                            <div className=\"mess\" type={bot.type}>\r\n                                {bot.type ===\"slideshow\" ? \r\n                                    <img src={bot.content}/>\r\n                                    : <p>{bot.content}</p>\r\n                                }\r\n                            </div>\r\n                            \r\n                        ))}\r\n                        </div>\r\n                        <div className=\"chat-responses\">\r\n                        {mess.message.responses.map((user)=>(\r\n                            <input \r\n                                className=\"bot-responses\" \r\n                                type=\"submit\" \r\n                                key={user.id} \r\n                                onClick={handleSubmit} \r\n                                value={user.content} \r\n                                name={user.tracking} />\r\n                        ))}\r\n                        </div>\r\n                    </> \r\n                    ))}\r\n                   {/* Input Box */}\r\n                    {/* <input\r\n                        id=\"chatBox\"\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        onClick={handleClick}\r\n                        value={message}\r\n                    ></input> */}\r\n                    <div className=\"scrollbar\" ref={endOfMessages} ></div>\r\n                    </div>\r\n                </div>\r\n                </> \r\n            : \"\"}\r\n        \r\n        {bartender ?\r\n        <div onClick={toggleBartender}>\r\n            <div className=\"bartender\" >\r\n                <button className=\"logo\" />\r\n                <div>\r\n                {!toggle ? <p className=\"bartender-title\">VIRTUAL BARTENDER</p> \r\n                    :\r\n                    <div className=\"go\" onClick={openChatBot}>^</div>\r\n                }\r\n                </div>\r\n            </div>\r\n            <div> \r\n                {toggle ? \r\n                    <p className=\"bartender-message\">\r\n                    Hi!\r\n                    <br />\r\n                    I am Hennessy virtual bartender.\r\n                    <br />\r\n                    Let me guide you to find your perfect cocktail match!\r\n                </p> : \"\"\r\n                }   \r\n                \r\n            </div>\r\n            </div> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    chat: state.kwalys.messagesChat,\r\n    botMessages: state.kwalys.messages,\r\n    token: localStorage.session\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { userMessage, botMessage, sendMessage })(Chat);\r\n  \r\n\r\n\r\n  /**\r\n   * <div className=\"chat-messages\">\r\n                {botMessages.length === 0\r\n                    ? \"\"\r\n                    : botMessages.message.messages.map((botMessage) => (\r\n                    <div key={botMessage.type}>\r\n                            {botMessage.content}\r\n                            {console.log(botMessage.content)}\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                <div className=\"chat-responses\">\r\n                {botMessages.length === 0\r\n                    ? \"\"\r\n                    :botMessages.message.responses.map((botResponse) => (\r\n                    <> \r\n                    {botResponse.content === \"Sucré\" ? <p>fruit</p> : \"\"}\r\n                    <input className=\"bot-responses\" type=\"submit\" key={botResponse.id} onClick={handleSubmit} value={botResponse.content} name={botResponse.tracking} />   \r\n                    </>    \r\n                ))}\r\n                </div>\r\n            </div>\r\n            : \"\"\r\n   */","// Import types\r\nimport {\r\n    RESPONSE_USER_SUCCESS,\r\n    RESPONSE_USER_FAIL,\r\n    SESSION_SUCCESS,\r\n    SESSION_FAIL,\r\n    RESPONSE_BOT_SUCCESS,\r\n    RESPONSE_BOT_FAIL,\r\n    MESSAGE_SUCCESS,\r\n    MESSAGE_FAIL\r\n  } from \"./types\";\r\n  \r\n  //  Import axios\r\n  import axios from \"axios\";\r\n  \r\n  //  Function that handles  users response\r\n  export const userMessage = (messages) => async (dispatch) => {\r\n    try {\r\n      dispatch({ type: RESPONSE_USER_SUCCESS, payload: messages });\r\n    } catch (err) {\r\n      dispatch({ type: RESPONSE_USER_FAIL });\r\n    }\r\n  };\r\n\r\n\r\n  //  Creates a session - API CALL\r\n\r\n  export const createSession = () => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/BOT_HENNESSY/api/web\");\r\n      dispatch({ type: SESSION_SUCCESS, payload: res.data.session });\r\n    } catch (err) {\r\n      dispatch({ type: SESSION_FAIL });\r\n    }\r\n  };\r\n\r\n  // First bot message - API CALL\r\n\r\n  export const botMessage = () => async (dispatch) => {\r\n    try {\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/BOT_HENNESSY/api/web\");\r\n      dispatch({ type: RESPONSE_BOT_SUCCESS, payload: res.data.data});\r\n    } catch (err) {\r\n      dispatch({ type:  RESPONSE_BOT_FAIL});\r\n    }\r\n  };\r\n  \r\n  //  Sends the message to the bot - API CALL\r\n  export const sendMessage = (resData) => async (dispatch) => {\r\n    try {\r\n       ;\r\n      const res = await axios.post(\"http://app.ivy.kwalys.com:8080/Wideagency/bots/BOT_HENNESSY/api/web\", resData);\r\n      dispatch({\r\n        type: MESSAGE_SUCCESS,\r\n        payload: res.data.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({ type: MESSAGE_FAIL });\r\n    }\r\n  };\r\n  ","// Import dependencies\nimport {useEffect} from 'react'\nimport './App.css';\nimport axios from 'axios';\n\n// Import redux component\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// Import chat component\nimport Chat from './components/chat/Chat';\n\n// Import action\nimport { createSession } from './actions/kwalys'\n\n\nif (localStorage.session) {\n  axios.defaults.headers.common[\"session\"] = localStorage.session;\n} else {\n  delete axios.defaults.headers.common[\"session\"];\n}\n\n// Connect application to redux\nconst App = () => {\n  useEffect(() => {\n    // Check if there session\n    if(!localStorage.session) {\n      //Create\n      store.dispatch(createSession())\n      console.log(localStorage.session, \"session\")\n    }\n  })\n\n\n\n  return (\n    <Provider store={store} >\n      <div className=\"App\">\n        <Chat />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}